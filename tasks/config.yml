### Browser

- name: creating directory {{ item }}
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: root
    group: root
  with_items:
  - /etc/chromium/policies/managed/
  - /etc/brave/policies/managed/

- name: Install Brave/Chromium Extension
  ansible.builtin.template:
    src: ExtensionInstallForcelist.json.j2
    dest: "/etc/{{ item }}/policies/managed/ExtensionInstallForcelist.json"
    owner: root
    group: root
  with_items:
  - chromium
  - brave

- name: Chromium Policies
  ansible.builtin.template:
    src: genericChromeEnterprisePolicyTemplate.json.j2
    dest: "/etc/chromium/policies/managed/{{ item.name }}.json"
    owner: root
    group: root
  with_items: "{{ desktop_ChromeEnterprisePolicies }}"

- name: Brave Policies
  ansible.builtin.template:
    src: genericChromeEnterprisePolicyTemplate.json.j2
    dest: "/etc/brave/policies/managed/{{ item.name }}.json"
    owner: root
    group: root
  with_items: "{{ desktop_ChromeEnterprisePolicies }}"

### XFCE ### Generic xfce directories

- name: creating directory /.config/xfce4/xfconf/xfce-perchannel-xml
  ansible.builtin.file:
    path: "{{ item.home }}/.config/xfce4/xfconf/xfce-perchannel-xml"
    state: directory
    owner: "{{ item.name }}"
    group: "{{ item.name }}"
  with_items:
  - "{{ desktop_users }}"

### XFCE ### Desktop

- name: copy desktop background
  ansible.builtin.copy:
    src: "wallpapers/{{ xfce_background }}"
    dest: "/usr/share/backgrounds/xfce/{{ xfce_background }}"

### XFCE ### Panel

- name: creating folders for desktop files
  ansible.builtin.file:
    path: "{{ item.0.home }}/.config/xfce4/panel/launcher-{{ item.1.id }}/"
    state: directory
    owner: "{{ item.0.name }}"
    group: "{{ item.0.name }}"
  with_nested:
  - "{{ desktop_users }}"
  - "{{ xfce_desktop_files }}"

- name: deploy desktop files
  ansible.builtin.copy:
    src: "{{ item.1.name }}"
    dest: "{{ item.0.home }}/.config/xfce4/panel/launcher-{{ item.1.id }}/{{ item.1.name }}"
    owner: "{{ item.0.name }}"
    group: "{{ item.0.name }}"
  with_nested:
  - "{{ desktop_users }}"
  - "{{ xfce_desktop_files }}"

- name: configure genmon
  ansible.builtin.template:
    src: genmon.rc.j2
    dest: "{{ item.0.home }}/.config/xfce4/panel/genmon-{{ item.1.id }}.rc"
    owner: "{{ item.0.name }}"
    group: "{{ item.0.name }}"
  with_nested:
  - "{{ desktop_users }}"
  - "{{ xfce_panel1_items }}"
  when: item.1.name == "genmon"

- name: configure whiskermenu
  ansible.builtin.copy:
    src: whiskermenu.rc
    dest: "{{ item.0.home }}/.config/xfce4/panel/whiskermenu-{{ item.1.id }}.rc"
    owner: "{{ item.0.name }}"
    group: "{{ item.0.name }}"
  with_nested:
  - "{{ desktop_users }}"
  - "{{ xfce_panel1_items }}"
  when: item.1.name == "whiskermenu"

- name: configure systemload panel
  ansible.builtin.copy:
    src: systemload.rc
    dest: "{{ item.0.home }}/.config/xfce4/panel/systemload-{{ item.1.id }}.rc"
    owner: "{{ item.0.name }}"
    group: "{{ item.0.name }}"
  with_nested:
  - "{{ desktop_users }}"
  - "{{ xfce_panel1_items }}"
  when: item.1.name == "systemload"

- name: configure netload panel
  ansible.builtin.template:
    src: netload.rc.j2
    dest: "{{ item.0.home }}/.config/xfce4/panel/netload-{{ item.1.id }}.rc"
    owner: "{{ item.0.name }}"
    group: "{{ item.0.name }}"
  with_nested:
  - "{{ desktop_users }}"
  - "{{ xfce_panel1_items }}"
  when: item.1.name == "netload"

### XFCE ### xinitrc

- name: deploy xinitrc
  ansible.builtin.template:
    src: xinitrc.j2
    dest: "{{ item.home }}/.config/xfce4/xinitrc"
    owner: "{{ item.name }}"
    group: "{{ item.name }}"
    mode: "0744"
  with_items:
  - "{{ desktop_users }}"
  tags:
  - xinitrc

### XFCE ### xfce xsession (for XRDP)

- name: xsession
  ansible.builtin.copy:
    src: xsession
    dest: "{{ item.home }}/.xsession"
    owner: "{{ item.name }}"
    group: "{{ item.name }}"
  with_items:
  - "{{ desktop_users }}"

### Themes ### Cursor

- name: creating directory "~/.icons/"
  ansible.builtin.file:
    path: "{{ item.home }}/.icons/"
    state: directory
    recurse: yes
    owner: "{{ item.name }}"
    group: "{{ item.name }}"
  with_items:
  - "{{ desktop_users }}"

- name: Extract OpenZone_Black-1.2.6.tar.xz
  ansible.builtin.unarchive:
    src: OpenZone_Black.zip
    dest: "{{ item.home }}/.icons/"
    creates: "{{ item.home }}/.icons/OpenZone_Black"
    owner: "{{ item.name }}"
    group: "{{ item.name }}"
  with_items:
  - "{{ desktop_users }}"

### Themes ### Icons

- name: copy icons for panel
  ansible.builtin.copy:
    src: "{{ item.icon }}"
    dest: "/usr/share/pixmaps/{{ item.icon }}"
  with_items:
  - "{{ xfce_desktop_files + xfce_desktop_files_individual }}"
  when: item.icon is defined

### Thunar ### Custom Actions

- name: creating directory .config/Thunar
  ansible.builtin.file:
    path: "{{ item.home }}/.config/Thunar"
    state: directory
    owner: "{{ item.name }}"
    group: "{{ item.name }}"
  with_items:
  - "{{ desktop_users }}"

- name: configure Thunar custom actions
  ansible.builtin.template:
    src: uca.xml.j2
    dest: "{{ item.home }}/.config/Thunar/uca.xml"
    owner: "{{ item.name }}"
    group: "{{ item.name }}"
  with_items:
  - "{{ desktop_users }}"
  tags:
  - thunar

### MIME-Types to Apps

- name: Configure MIME-Types
  ansible.builtin.template:
    src: mimeapps.list.j2
    dest: "{{ item.home }}/.config/mimeapps.list"
    owner: "{{ item.name }}"
    group: "{{ item.name }}"
  with_items:
  - "{{ desktop_users }}"
